known bugs:

###########################################################################

option: command line arguments
setting: magic comments in code that change compiler/linker flags

###########################################################################

how to provide flags?

std		first-trigger
opt		per-file
flg		aggregate-all-file?
lib		aggregate-all-file
run		first-trigger
trg		first-trigger

global setting (from first trigger)
local override (from each file)
aggregate (gather from all files)

std  : hello	default
std  = hello	local override
std += hello	aggregate
std => hello	global (only in trigger, only first one is valid)

setting		:=+>
----------------------
std			first-trigger
opt			first-trigger
run			first-trigger
trg			first-trigger
flg			aggregate
lib			aggregate

package settings;
s = parse(triggers[0], qw(std opt run trg))

a = {}
aggregate(a, npath1, qw(flg lib))
aggregate(a, npath2, qw(flg lib))
aggregate(a, npath3, qw(flg lib))
a = aggregate(a)

void _unescape(s || $_);
void _escape(s || $_);
void _parse(s, path, symbol, qw(keys));

### aggregation:
+= a b\ c d
+= a b c\ d
will result in:
a
b
b c
c
c d
d

1. split:
+=
a
b\ c
d
+=
a
b
c\ d

2. merge as set
+=
a
b\ c
d
b
c\ d

3. unescape
a
b c
d
b
c d

###########################################################################

build(src):
	mark_dirty(src)
	build_dirty(src)
	dirty = {}

mark_dirty(src):
	if modified(src):
		update_file(src)
		update_deps(src) unless is_header(src)
		dirty[src] = true

	if modified(obj):
		update_file(obj) if -e obj;
		dirty[src] = true

	for dep <- deps(src):
		mark_dirty(dep)
		dirty[src] = true if dirty[dep]

build_dirty(src):
	return unless dirty[src]
	unless is_header(src):
		obj = compile(src)
		update_file(obj)
	delete dirty[src]

	for dep <- deps(src):
		build_dirty(dep)
		dep = header_to_source(dep)
		next unless dep
		build_dirty(dep)





###########################################################################



trigger = hello.cc
hello.o: hello.cc hello.hh world.hh
world.o: world.cc world.hh hello.hh

hello.cc -> hello.o:... rule -> world.hh -> world.cc exist -> world.o: rule

# target, dependency = find_deps(source)

build_object('hello.cc'):
	objname = 'hello.o'
	if !dirty(objname) return;
	compile('hello.cc')

_dirty_list(obj, pending):
	return if exists(pending[obj])
	pending[obj] = false

	if modified(obj):
		update_deps(obj)
		pending[obj] = true

	for dep <- deps[obj]:
		dirty_list(dep, pending);
		pending[obj] ||= pending[dep];

build(obj)
	pending = {}
	_dirty_list(obj, pending)
	relink = false
	for ob, dirty <- pending:
		if dirty:
			compile(ob)
			update_file(ob)
			relink = true
	if relink:
		link(keys pending)



build(objname, pending):
	if exists(pending[objname]):
		return pending[objname]

	dirty = false
	if modified(objname):
		update_deps(objname)
		dirty = true

	for dep <- deps(objname):
		pending[objname] = dirty
		dirty ||= build(dep)
	delete pending[objname]

	if dirty:
		compile(objname)
		update_file(objname);
	
	return dirty


build(objname):
	dirty = false;
	if modified(objname):
		update_deps(objname)
		dirty = true;

	bool dirty = false;
	for dep <- deps(objname):
		dirty |= build(dep)
	if dirty: compile(objname)


dirty_files(file, files):
	files = files || {};
	if modified(file) files->{file} = true;
	for f <- file.dependencies: dirty_files(f, files);
	return files;

